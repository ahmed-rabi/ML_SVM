{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1183165,"sourceType":"datasetVersion","datasetId":672377}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"papermill":{"default_parameters":{},"duration":123.2782,"end_time":"2024-12-15T17:04:02.855538","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-12-15T17:01:59.577338","version":"2.6.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ayaehabramadan/svm-ovo-softmargin-final?scriptVersionId=213356595\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport cv2\nimport albumentations as A\nimport os\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom scipy.optimize import minimize\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"558f57d5-fd3b-4ed8-a40b-71d7067bf0a1","_cell_guid":"75f0b09b-f4eb-44fb-94fd-08709ec8ca4b","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"papermill":{"duration":12.149975,"end_time":"2024-12-15T17:02:14.571881","exception":false,"start_time":"2024-12-15T17:02:02.421906","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-12-16T13:58:23.550973Z","iopub.execute_input":"2024-12-16T13:58:23.552029Z","iopub.status.idle":"2024-12-16T13:58:23.558927Z","shell.execute_reply.started":"2024-12-16T13:58:23.551987Z","shell.execute_reply":"2024-12-16T13:58:23.557891Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# clear the output \nfrom IPython.display import clear_output\n\n# Clear the notebook output\nclear_output(wait=True)","metadata":{"_uuid":"97fa9d1d-950e-4be5-bde7-5ebf6f1963cb","_cell_guid":"f4924af9-d927-4cda-b0bd-e6243256bba8","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:56.865734Z","iopub.execute_input":"2024-12-16T13:57:56.866169Z","iopub.status.idle":"2024-12-16T13:57:56.881188Z","shell.execute_reply.started":"2024-12-16T13:57:56.866097Z","shell.execute_reply":"2024-12-16T13:57:56.879795Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.026093,"end_time":"2024-12-15T17:02:14.616838","exception":false,"start_time":"2024-12-15T17:02:14.590745","status":"completed"},"tags":[]},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"# Data Augmentation using Albumentations\n\nPrevent overfitting by increasing dataset variability.","metadata":{"_uuid":"2ca1c00d-b07b-4301-9fb5-c921a2c4cc39","_cell_guid":"55f78832-31d9-4b99-b081-adfa349477b2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.016836,"end_time":"2024-12-15T17:02:27.117528","exception":false,"start_time":"2024-12-15T17:02:27.100692","status":"completed"},"tags":[]}},{"cell_type":"code","source":"transform = A.Compose([\n    A.HorizontalFlip(p=0.5),\n    A.RandomRotate90(p=0.5),\n    A.RandomBrightnessContrast(p=0.2),\n    A.ShiftScaleRotate(shift_limit=0.05, scale_limit=0.05, rotate_limit=15, p=0.5),\n])","metadata":{"_uuid":"cb033aa8-0e1c-4cb0-85d2-5d4687e758ff","_cell_guid":"860da5a7-405c-45bc-97a9-57d036ea7f0a","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:56.882449Z","iopub.execute_input":"2024-12-16T13:57:56.882803Z","iopub.status.idle":"2024-12-16T13:57:56.90559Z","shell.execute_reply.started":"2024-12-16T13:57:56.882765Z","shell.execute_reply":"2024-12-16T13:57:56.904376Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.03733,"end_time":"2024-12-15T17:02:27.172133","exception":false,"start_time":"2024-12-15T17:02:27.134803","status":"completed"},"tags":[]},"outputs":[],"execution_count":8},{"cell_type":"code","source":"augmentation_path = '/kaggle/input/brain-tumor-classification-mri/Training/no_tumor'\noutput = '/kaggle/working/augmented_no_tumor' # Directory to save augmented images.\n\n# to ensure the output directory exists\nos.makedirs(output, exist_ok=True)\n\n# Augmentation\nfor img in os.listdir(augmentation_path):\n    image_path = os.path.join(augmentation_path, img)\n    image = cv2.imread(image_path)\n    augmented = transform(image=image)['image']\n    \n    # Save\n    output_img_path = os.path.join(output, f\"{os.path.splitext(img)[0]}_aug.jpg\")\n    # adding _aug suffix  to image name\n    cv2.imwrite(output_img_path, augmented)","metadata":{"_uuid":"56933e3d-043b-400c-b58e-611a30c03ddb","_cell_guid":"b50f6f07-60ad-4bdb-bbda-9d031f559a42","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:59:21.270969Z","iopub.execute_input":"2024-12-16T13:59:21.271395Z","iopub.status.idle":"2024-12-16T13:59:21.30473Z","shell.execute_reply.started":"2024-12-16T13:59:21.271357Z","shell.execute_reply":"2024-12-16T13:59:21.303252Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":5.112083,"end_time":"2024-12-15T17:02:32.301521","exception":false,"start_time":"2024-12-15T17:02:27.189438","status":"completed"},"tags":[]},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[12], line 8\u001b[0m\n\u001b[1;32m      5\u001b[0m os\u001b[38;5;241m.\u001b[39mmakedirs(output, exist_ok\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m# Augmentation\u001b[39;00m\n\u001b[0;32m----> 8\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m img \u001b[38;5;129;01min\u001b[39;00m \u001b[43mos\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlistdir\u001b[49m\u001b[43m(\u001b[49m\u001b[43maugmentation_path\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m      9\u001b[0m     image_path \u001b[38;5;241m=\u001b[39m os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(augmentation_path, img)\n\u001b[1;32m     10\u001b[0m     image \u001b[38;5;241m=\u001b[39m cv2\u001b[38;5;241m.\u001b[39mimread(image_path)\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/kaggle/input/brain-tumor-classification-mri/Training/no_tumor'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/kaggle/input/brain-tumor-classification-mri/Training/no_tumor'","output_type":"error"}],"execution_count":12},{"cell_type":"code","source":"train_data = []\ntrain_labels = []\ntest_data = []\ntest_labels = []","metadata":{"_uuid":"9ce30fa1-a368-44d8-a8e3-9b3a8064f70e","_cell_guid":"1b2f03bf-9a2b-4d3b-a92c-d0f304af323b","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:56.955793Z","iopub.status.idle":"2024-12-16T13:57:56.9564Z","shell.execute_reply.started":"2024-12-16T13:57:56.956106Z","shell.execute_reply":"2024-12-16T13:57:56.95614Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.025741,"end_time":"2024-12-15T17:02:32.34496","exception":false,"start_time":"2024-12-15T17:02:32.319219","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Reading the Data","metadata":{"_uuid":"db4b4641-1a92-4096-9250-4a32c8582ea1","_cell_guid":"8f282e9f-1e93-4acd-9aac-62985f5af490","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.017072,"end_time":"2024-12-15T17:02:32.380135","exception":false,"start_time":"2024-12-15T17:02:32.363063","status":"completed"},"tags":[]}},{"cell_type":"code","source":"base_path = \"/kaggle/input/brain-tumor-classification-mri\"\naugmented_path = \"/kaggle/working\"  #for augmented data\n\n# Loop through Training and Testing directories\nfor dir in os.listdir(base_path):\n    path = os.path.join(base_path, dir)  # Path to 'Training' or 'Testing'\n    \n    for sub_dir in os.listdir(path):  #each class\n        sub_dir_path = os.path.join(path, sub_dir)  # path to subdirectory\n        \n        # Check if it's a valid directory\n        if os.path.isdir(sub_dir_path):\n            for img in os.listdir(sub_dir_path):  #each image in the subdirectory\n                img_path = os.path.join(sub_dir_path, img)\n                image = cv2.imread(img_path)\n                if image is None:\n                    continue  # Skip invalid files\n                \n                image = cv2.resize(image, (64, 64))  # Resize image\n                image = image.flatten() / 255.0  # Normalize image\n                \n                # Append to appropriate list based on Training or Testing\n                if dir == \"Testing\":\n                    test_data.append(image)\n                    test_labels.append(sub_dir) # Use subdirectory name as label\n                else:  # For Training\n                    train_data.append(image)\n                    train_labels.append(sub_dir)\n\n# Include augmented data from the /kaggle/working directory\naugmented_no_tumor_path = os.path.join(augmented_path, \"augmented_no_tumor\")\nif os.path.exists(augmented_no_tumor_path):\n    for img in os.listdir(augmented_no_tumor_path):\n        img_path = os.path.join(augmented_no_tumor_path, img)\n        image = cv2.imread(img_path)\n        if image is None:\n            continue  # Skip invalid files\n        \n        image = cv2.resize(image, (64, 64))  # Resize image\n        image = image.flatten() / 255.0  # Normalize image\n        \n        # Append augmented data under the 'no_tumor' label\n        train_data.append(image)\n        train_labels.append(\"no_tumor\")  # Label as 'no_tumor'","metadata":{"_uuid":"cf480fe9-09fd-420f-89d4-40b9ac6d0490","_cell_guid":"a1dce2f1-c06c-40e0-bda6-38e77444f485","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:56.958096Z","iopub.status.idle":"2024-12-16T13:57:56.958548Z","shell.execute_reply.started":"2024-12-16T13:57:56.958356Z","shell.execute_reply":"2024-12-16T13:57:56.958378Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":31.622196,"end_time":"2024-12-15T17:03:04.0199","exception":false,"start_time":"2024-12-15T17:02:32.397704","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Convert to numpy arrays","metadata":{"_uuid":"a5a55294-bfbd-4d88-995d-1130434b3e0e","_cell_guid":"f3eae153-292a-4458-a953-b99aabcd8600","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.018172,"end_time":"2024-12-15T17:03:04.063175","exception":false,"start_time":"2024-12-15T17:03:04.045003","status":"completed"},"tags":[]}},{"cell_type":"code","source":"train_data = np.array(train_data)\ntrain_labels = np.array(train_labels)\ntest_data = np.array(test_data)\ntest_labels = np.array(test_labels)\n\nprint(len(train_data), len(train_labels), len(test_data), len(test_labels))","metadata":{"_uuid":"f7be4dfc-5297-4e0a-9ad7-fef271759bce","_cell_guid":"7f4ae1fa-74d1-45af-85c6-dd699e5eccd8","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.089782Z","iopub.execute_input":"2024-12-16T13:57:57.090188Z","iopub.status.idle":"2024-12-16T13:57:57.124364Z","shell.execute_reply.started":"2024-12-16T13:57:57.090155Z","shell.execute_reply":"2024-12-16T13:57:57.121624Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.1968,"end_time":"2024-12-15T17:03:04.277051","exception":false,"start_time":"2024-12-15T17:03:04.080251","status":"completed"},"tags":[]},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[10], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m train_data \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(\u001b[43mtrain_data\u001b[49m)\n\u001b[1;32m      2\u001b[0m train_labels \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(train_labels)\n\u001b[1;32m      3\u001b[0m test_data \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(test_data)\n","\u001b[0;31mNameError\u001b[0m: name 'train_data' is not defined"],"ename":"NameError","evalue":"name 'train_data' is not defined","output_type":"error"}],"execution_count":10},{"cell_type":"markdown","source":"# train_test_split","metadata":{"_uuid":"6963fa5b-cfda-44f8-abeb-7f41cd7e9774","_cell_guid":"969b38f5-55b3-4d7f-9be6-dcfb05691d60","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.017018,"end_time":"2024-12-15T17:03:04.31308","exception":false,"start_time":"2024-12-15T17:03:04.296062","status":"completed"},"tags":[]}},{"cell_type":"code","source":"xtrain, xtest, ytrain, ytest = train_test_split(train_data, train_labels, test_size=0.2, random_state=42)","metadata":{"_uuid":"ac04e64b-a284-44f1-abd6-56f1137d571c","_cell_guid":"2569bd65-3a2e-4216-b910-8cb755675398","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.125244Z","iopub.status.idle":"2024-12-16T13:57:57.125639Z","shell.execute_reply.started":"2024-12-16T13:57:57.125461Z","shell.execute_reply":"2024-12-16T13:57:57.125481Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.116089,"end_time":"2024-12-15T17:03:04.446246","exception":false,"start_time":"2024-12-15T17:03:04.330157","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ytrain","metadata":{"_uuid":"c6e1b39d-780d-4846-a724-e079d09bf7f9","_cell_guid":"5530ca63-77ee-4f90-9c06-e3d840fdee3c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.127817Z","iopub.status.idle":"2024-12-16T13:57:57.128391Z","shell.execute_reply.started":"2024-12-16T13:57:57.128118Z","shell.execute_reply":"2024-12-16T13:57:57.128148Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.030165,"end_time":"2024-12-15T17:03:04.493649","exception":false,"start_time":"2024-12-15T17:03:04.463484","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# PCA","metadata":{"_uuid":"af11a844-71cc-41a1-b013-47b64a5e96a2","_cell_guid":"211577d3-bd66-4db4-a396-22ad5d771624","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.017446,"end_time":"2024-12-15T17:03:04.528203","exception":false,"start_time":"2024-12-15T17:03:04.510757","status":"completed"},"tags":[]}},{"cell_type":"code","source":"scaler = StandardScaler()\nxtrain = scaler.fit_transform(xtrain)\nxtest = scaler.transform(xtest)","metadata":{"_uuid":"5647cfb2-821d-4513-896e-09e4ad3e51bd","_cell_guid":"24003fbb-1378-4a64-84f0-ba962ed3bde0","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.130585Z","iopub.status.idle":"2024-12-16T13:57:57.1311Z","shell.execute_reply.started":"2024-12-16T13:57:57.13089Z","shell.execute_reply":"2024-12-16T13:57:57.130912Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.590004,"end_time":"2024-12-15T17:03:05.13542","exception":false,"start_time":"2024-12-15T17:03:04.545416","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\n\npca = PCA(n_components=0.98)\npca_train = pca.fit_transform(xtrain)\npca_test = pca.transform(xtest)\nsvm = SVC()\n\nsvm.fit(pca_train, ytrain)\ny_pred = svm.predict(pca_test)\nprint(accuracy_score(ytest, y_pred))","metadata":{"_uuid":"d0ba80c4-b9b1-4f4b-a36a-66a249093c6e","_cell_guid":"c73c1378-1235-427c-99fc-c8b7eafa33e6","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.132289Z","iopub.status.idle":"2024-12-16T13:57:57.1327Z","shell.execute_reply.started":"2024-12-16T13:57:57.13251Z","shell.execute_reply":"2024-12-16T13:57:57.132532Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":28.286165,"end_time":"2024-12-15T17:03:33.439372","exception":false,"start_time":"2024-12-15T17:03:05.153207","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Using n_components=0.98 ensures that 98% of the variance in the data is preserved. This is a good approach when you are unsure of the ideal number of components.**","metadata":{"_uuid":"4adb2512-de19-4773-b63f-7c3c7c7fcf77","_cell_guid":"d0cf8b63-09ec-432f-bc2e-e6520be7c2f2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.017028,"end_time":"2024-12-15T17:03:33.473749","exception":false,"start_time":"2024-12-15T17:03:33.456721","status":"completed"},"tags":[]}},{"cell_type":"code","source":"print(classification_report(ytest, y_pred))","metadata":{"_uuid":"1b791200-7ea4-4086-a0bc-2aa6c2c7443a","_cell_guid":"d7e34398-7702-4f56-a951-17fd34a080d1","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.134849Z","iopub.status.idle":"2024-12-16T13:57:57.135406Z","shell.execute_reply.started":"2024-12-16T13:57:57.135132Z","shell.execute_reply":"2024-12-16T13:57:57.13516Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.04178,"end_time":"2024-12-15T17:03:33.532885","exception":false,"start_time":"2024-12-15T17:03:33.491105","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder","metadata":{"_uuid":"57bf4014-1010-4488-ba1c-727503483789","_cell_guid":"5db32e4e-a2bd-48d1-abdd-36ff0d26f6b3","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.136826Z","iopub.status.idle":"2024-12-16T13:57:57.137376Z","shell.execute_reply.started":"2024-12-16T13:57:57.137103Z","shell.execute_reply":"2024-12-16T13:57:57.137131Z"},"papermill":{"duration":0.025874,"end_time":"2024-12-15T17:03:33.57628","exception":false,"start_time":"2024-12-15T17:03:33.550406","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"label_encoder = LabelEncoder()\ntrain_labels_encoded = label_encoder.fit_transform(ytrain)\ntest_labels_encoded = label_encoder.transform(ytest)","metadata":{"_uuid":"4055ce55-e5f7-4441-a738-09d81b63523b","_cell_guid":"6c7982b9-97e2-4184-afaa-3c353171538e","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.138857Z","iopub.status.idle":"2024-12-16T13:57:57.13925Z","shell.execute_reply.started":"2024-12-16T13:57:57.139062Z","shell.execute_reply":"2024-12-16T13:57:57.139084Z"},"papermill":{"duration":0.027424,"end_time":"2024-12-15T17:03:33.621041","exception":false,"start_time":"2024-12-15T17:03:33.593617","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_labels_encoded","metadata":{"_uuid":"fce03c93-c343-45af-b2a5-fa9d44796abc","_cell_guid":"f6ca3eec-e8a4-4aef-8b88-d9acfc08ee54","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.141278Z","iopub.status.idle":"2024-12-16T13:57:57.141658Z","shell.execute_reply.started":"2024-12-16T13:57:57.141484Z","shell.execute_reply":"2024-12-16T13:57:57.141502Z"},"papermill":{"duration":0.027156,"end_time":"2024-12-15T17:03:33.665498","exception":false,"start_time":"2024-12-15T17:03:33.638342","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_labels_encoded","metadata":{"_uuid":"edd1202a-e104-4f12-a613-8e604dfaf6ff","_cell_guid":"1a4be44c-6e60-48d6-be53-5bbaf6068248","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.144496Z","iopub.status.idle":"2024-12-16T13:57:57.145107Z","shell.execute_reply.started":"2024-12-16T13:57:57.144795Z","shell.execute_reply":"2024-12-16T13:57:57.144825Z"},"papermill":{"duration":0.028917,"end_time":"2024-12-15T17:03:33.711807","exception":false,"start_time":"2024-12-15T17:03:33.68289","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Split the training data further into training and validation sets\nxtrain, xval, ytrain, yval = train_test_split(pca_train, train_labels_encoded, test_size=0.2, random_state=42)","metadata":{"_uuid":"e3b30848-1133-4da6-bd0e-f4e8bc3ee25f","_cell_guid":"d2901b0b-e53e-47ba-abe9-c7f0fbe1b0ab","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.146664Z","iopub.status.idle":"2024-12-16T13:57:57.147266Z","shell.execute_reply.started":"2024-12-16T13:57:57.146983Z","shell.execute_reply":"2024-12-16T13:57:57.147011Z"},"papermill":{"duration":0.073817,"end_time":"2024-12-15T17:03:33.803381","exception":false,"start_time":"2024-12-15T17:03:33.729564","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Objective & constraints function of SVM Soft Margin","metadata":{"_uuid":"7113118f-db60-4651-9760-2e33378b2c22","_cell_guid":"796d97f0-0f08-464d-90d6-e96b8483fbd8","trusted":true,"collapsed":false,"papermill":{"duration":0.018352,"end_time":"2024-12-15T17:03:44.872278","exception":false,"start_time":"2024-12-15T17:03:44.853926","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"![image.png](attachment:0c61a77d-ddc1-4dde-97d6-8684b3053366.png)","metadata":{"_uuid":"3f3bbb4c-ffa7-47f2-b131-f1d1ce83bdc3","_cell_guid":"3795fd17-a57f-4775-8c77-e301b3f2c0dd","trusted":true,"collapsed":false,"papermill":{"duration":0.017786,"end_time":"2024-12-15T17:03:44.908268","exception":false,"start_time":"2024-12-15T17:03:44.890482","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"![image.png](attachment:b8b64d10-56f6-4300-ba4e-6bba0a72d55d.png)","metadata":{"_uuid":"34946b88-e6be-4610-a18e-6e1896ede093","_cell_guid":"20f4dff5-bb21-41a3-b721-4de1ff11acb4","trusted":true,"collapsed":false,"papermill":{"duration":0.018143,"end_time":"2024-12-15T17:03:44.944653","exception":false,"start_time":"2024-12-15T17:03:44.92651","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"![image.png](attachment:f6378b96-3587-4177-b8d2-7a8da93f4a9b.png)\n![image.png](attachment:ae68367f-6f53-4382-a54a-be3b515040c5.png)","metadata":{"_uuid":"ce773280-3316-4716-9998-5bac8ee04212","_cell_guid":"ba5e68ff-3090-4108-9bc6-cfe6ba508daa","trusted":true,"collapsed":false,"papermill":{"duration":0.017875,"end_time":"2024-12-15T17:03:44.981109","exception":false,"start_time":"2024-12-15T17:03:44.963234","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"pip install cvxopt","metadata":{"_uuid":"6e8f3504-bb27-47f4-9ddb-74753b1b0188","_cell_guid":"737bd1b1-78b0-4093-9817-7ba892d74a04","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.151579Z","iopub.status.idle":"2024-12-16T13:57:57.152058Z","shell.execute_reply.started":"2024-12-16T13:57:57.151852Z","shell.execute_reply":"2024-12-16T13:57:57.151875Z"},"papermill":{"duration":0.054922,"end_time":"2024-12-15T17:03:45.054269","exception":false,"start_time":"2024-12-15T17:03:44.999347","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from cvxopt import matrix, solvers\nfrom itertools import combinations\nfrom sklearn.metrics import accuracy_score, classification_report","metadata":{"_uuid":"7b21775b-867d-4f4d-9498-e788e6c9ee84","_cell_guid":"49ae1d1d-ccda-43a7-a9ab-41b9ae922c86","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.153756Z","iopub.status.idle":"2024-12-16T13:57:57.154237Z","shell.execute_reply.started":"2024-12-16T13:57:57.154047Z","shell.execute_reply":"2024-12-16T13:57:57.154067Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Gram Matrix \n'K = np.dot(X, X.T)' \n![image.png](attachment:ffc64363-3cc4-482e-bb17-764e4c175ad2.png)","metadata":{"_uuid":"011216fe-b0c6-478c-85d0-08340fd02186","_cell_guid":"2cf4eddb-858c-4048-88dc-ac456c4c3c4d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"## the optimization Problem after adding the Lagrange multiplieir \n![image.png](attachment:63cfa921-d8c1-4acf-93f7-ad6850729703.png)\n![image.png](attachment:fe890cb1-b16f-42f3-b8a1-2eb4544219b4.png)","metadata":{"_uuid":"1a6b4551-d699-4af2-a561-f0d184586232","_cell_guid":"03f36a24-479d-463a-9f5a-67c5ec4f6c81","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"# Making the constraints in code \n\n![image.png](attachment:66190002-238c-48cc-8153-a5c1c64c4a34.png)\n![image.png](attachment:919979b5-0767-416c-8206-3c64fdb307ab.png)","metadata":{"_uuid":"70cbb891-deea-4e37-8a22-7f53afdb66d9","_cell_guid":"3ed2e184-dba2-4d6a-871c-d503f97c3747","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"## What is outer product ?\n![image.png](attachment:2714762b-b413-4cda-ba1a-3951aac6df0f.png)","metadata":{"_uuid":"cfc92b1a-7e2b-4383-96b4-6ba500ddd0c9","_cell_guid":"82598b22-4fd6-444a-8a23-2ef3c7f82904","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"class SVM:\n    def __init__(self, C=1.0):\n        self.C = C  # Soft margin parameter\n        #A larger value of𝐶 means \n        #the model penalizes misclassifications more\n        self.w = None  # Weight vector\n        self.b = 0     # Bias term\n\n    def fit(self, X, y):\n        n_samples, n_features = X.shape\n\n        # Compute the Gram matrix (dot product between pairs of samples)\n        #computes pairwise dot products of all input vectors\n        K = np.dot(X, X.T) # dot product for similarity \n\n        # Setup the QP(Quadratic Programming) problem\n        P = matrix(np.outer(y, y) * K) # y*y*K ->combine labels and gram matrix\n        q = matrix(-np.ones((n_samples, 1)))# make a column matix with size n*1 filled with -1\n        G = matrix(np.vstack((-np.eye(n_samples), np.eye(n_samples))))\n        h = matrix(np.hstack((np.zeros(n_samples), self.C * np.ones(n_samples))))\n        A = matrix(y.reshape(1, -1), tc='d')\n        b = matrix(0.0)# matrix of single value\n\n        # Solve the QP problem\n        sol = solvers.qp(P, q, G, h, A, b) # solve to find lagrange multiplier\n        alphas = np.array(sol['x']).flatten() #-> convert to 1D\n        #sol['x'] ->contains the optimal lagrange\n        #multiplier for each sample as a matix\n\n        # Support vectors have non-zero alphas\n        support_vector_idx = alphas > 1e-5 #0.00001 \n        #->creates a boolean mask, marking the indices of all \n        #values that are greater than the threshold.\n        #this small value not exactly zero\n        #helps identify values of \n        #that are effectively non-zero while \n        #ignoring small noise introduced by the solver.\n        self.alphas = alphas[support_vector_idx] #Extract Support Vectors\n        self.support_vectors = X[support_vector_idx] #Extract Support Vectors' Feature Values\n\n        self.support_vector_labels = y[support_vector_idx]#Extract Support Vectors' Labels\n\n        # Compute weight vector\n        self.w = np.sum(self.alphas[:, np.newaxis] * self.support_vector_labels[:, np.newaxis] * self.support_vectors, axis=0)\n        # np.newaxis reshape to column vector for broadcasting\n        # Compute bias\n        self.b = np.mean(\n            self.support_vector_labels - np.dot(self.support_vectors, self.w)\n        )\n\n    def predict(self, X):\n        return np.sign(np.dot(X, self.w) + self.b)","metadata":{"_uuid":"53c1becf-7552-459e-874e-27393ab68f80","_cell_guid":"06ba4afd-3475-4af2-aede-fe2db913d9c0","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.15603Z","iopub.status.idle":"2024-12-16T13:57:57.156421Z","shell.execute_reply.started":"2024-12-16T13:57:57.15625Z","shell.execute_reply":"2024-12-16T13:57:57.156268Z"},"papermill":{"duration":0.066348,"end_time":"2024-12-15T17:03:45.165974","exception":false,"start_time":"2024-12-15T17:03:45.099626","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"![image.png](attachment:38cd202d-c68a-46e6-bc95-822da513b904.png)","metadata":{"_uuid":"bc8a75a1-f8c0-478c-b7be-d1129c96b7d3","_cell_guid":"ef51612c-3097-42f5-a8f8-9dee198973c4","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"![image.png](attachment:f3be05af-30bc-4a88-9a8e-a8400ec70751.png)","metadata":{"_uuid":"b4bd470f-796d-4264-8839-611eb95e5c5e","_cell_guid":"319b4cf8-ffcd-460a-868a-464d023ff414","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"class OvO_SVM: # one vs one\n    def __init__(self, C=1.0):\n        self.C = C\n        self.models = {} # dictionary to store binary SVM models\n        self.classes = None # Unique class labels\n\n    def fit(self, X, y):\n        self.classes = np.unique(y) # get unique classes from labels\n        self.models = {}\n\n        # Train binary SVMs for each pair of classes\n        for (class1, class2) in combinations(self.classes, 2): #Creates all possible pairs of classes \n            print(f\"Training for {class1} vs {class2}\")\n            # filter \n            #Select only the data points belonging to the current pair of classes\n            X_binary = X[np.logical_or(y == class1, y == class2)]\n            y_binary = y[np.logical_or(y == class1, y == class2)]\n            y_binary = np.where(y_binary == class1, 1, -1)\n\n            model = SVM(C=self.C)\n            model.fit(X_binary, y_binary)\n            self.models[(class1, class2)] = model\n\n    def predict(self, X):\n        #initializing votes matrix \n        #A 2D array with shape (num_samples,num_classes)initialized to zeros\n        votes = np.zeros((X.shape[0], len(self.classes)))\n\n        # Get predictions from all binary classifiers\n        for (class1, class2), model in self.models.items():\n            predictions = model.predict(X)\n            votes[:, self.classes.tolist().index(class1)] += predictions == 1\n            votes[:, self.classes.tolist().index(class2)] += predictions == -1\n#self.classes.tolist().index(class1):\n#Converts self.classes (array of all unique class labels) to a Python list.\n#Finds the index of class1 in the list.\n        \n        # Class with the most votes wins\n        return self.classes[np.argmax(votes, axis=1)]\n        #For each row in the votes matrix (each test sample),\n        #it finds the index of the column (class) with the highest vote count.\n\n#np.argmax(votes, axis=1):\n#For each row (sample), find the index of the maximum value (class with the highest votes).\n#self.classes maps the indices back to the actual class labels","metadata":{"_uuid":"0733fc98-b570-4ecf-b4e7-7d6875e8721a","_cell_guid":"4ce153ef-7454-4a66-9294-6e664bda89d5","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.158292Z","iopub.status.idle":"2024-12-16T13:57:57.158694Z","shell.execute_reply.started":"2024-12-16T13:57:57.158523Z","shell.execute_reply":"2024-12-16T13:57:57.158541Z"},"papermill":{"duration":0.031353,"end_time":"2024-12-15T17:03:45.215597","exception":false,"start_time":"2024-12-15T17:03:45.184244","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ovo_svm = OvO_SVM(C=1.0)\novo_svm.fit(xtrain, ytrain)\n\n# Predict and evaluate on validation data\nyval_pred = ovo_svm.predict(xval) \nprint(\"Validation Accuracy:\", accuracy_score(yval, yval_pred))\nprint(\"\\nClassification Report:\\n\", classification_report(yval, yval_pred))\n\n# Predict and evaluate on test data\nytest_pred = ovo_svm.predict(pca_test)\nprint(\"Test Accuracy:\", accuracy_score(test_labels_encoded, ytest_pred))\nprint(\"\\nClassification Report:\\n\", classification_report(test_labels_encoded, ytest_pred))","metadata":{"_uuid":"b060205f-f60d-4876-ad69-2c433d758ce4","_cell_guid":"6dfc9224-3c48-4190-897c-dae7dcc50125","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-12-16T13:57:57.160367Z","iopub.status.idle":"2024-12-16T13:57:57.160938Z","shell.execute_reply.started":"2024-12-16T13:57:57.160637Z","shell.execute_reply":"2024-12-16T13:57:57.160665Z"},"papermill":{"duration":16.565373,"end_time":"2024-12-15T17:04:01.799752","exception":false,"start_time":"2024-12-15T17:03:45.234379","status":"completed"},"tags":[],"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\n\ndef plot_decision_boundaries_with_features_fixed(ovo_svm, X, y, feature_indices=(0, 1), step=0.001):\n    \"\"\"\n    Plot decision boundaries for two selected features using the trained OvO SVM model with fixed feature alignment.\n\n    Parameters:\n    - ovo_svm: Trained OvO_SVM model.\n    - X: Training data (numpy array or pandas DataFrame).\n    - y: Labels for the training data.\n    - feature_indices: Tuple specifying the indices of the two features to use for plotting.\n    - step: Step size for the grid; larger values reduce memory usage but decrease resolution.\n    \"\"\"\n    feature_1, feature_2 = feature_indices\n    X_selected = X[:, [feature_1, feature_2]]\n\n    # Define the grid with reduced resolution\n    x_min, x_max = X_selected[:, 0].min() - 1, X_selected[:, 0].max() + 1\n    y_min, y_max = X_selected[:, 1].min() - 1, X_selected[:, 1].max() + 1\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, step),\n                        np.arange(y_min, y_max, step))\n    grid = np.c_[xx.ravel(), yy.ravel()]\n\n    # Create a full-dimensional grid\n    full_dim_grid = np.zeros((grid.shape[0], X.shape[1]))\n    full_dim_grid[:, feature_1] = grid[:, 0]\n    full_dim_grid[:, feature_2] = grid[:, 1]\n\n    # Predict on grid points\n    votes = np.zeros((grid.shape[0], len(ovo_svm.classes)))\n    for (class1, class2), model in ovo_svm.models.items():\n        predictions = model.predict(full_dim_grid)\n        votes[:, ovo_svm.classes.tolist().index(class1)] += predictions == 1\n        votes[:, ovo_svm.classes.tolist().index(class2)] += predictions == -1\n\n    # Assign each point to the class with the most votes\n    grid_predictions = ovo_svm.classes[np.argmax(votes, axis=1)]\n    grid_predictions = grid_predictions.reshape(xx.shape)\n\n    # Plot decision boundaries\n    plt.contourf(xx, yy, grid_predictions, alpha=0.8, cmap=plt.cm.Paired)\n\n    # Plot data points\n    for class_label in ovo_svm.classes:\n        plt.scatter(X_selected[y == class_label, 0], X_selected[y == class_label, 1], label=f\"Class {class_label}\")\n\n    plt.legend()\n    plt.title(f\"Decision Boundaries (Features {feature_1} & {feature_2})\")\n    plt.xlabel(f\"Feature {feature_1}\")\n    plt.ylabel(f\"Feature {feature_2}\")\n    plt.show()\n\n# Example usage\nplot_decision_boundaries_with_features_fixed(ovo_svm, xtrain, ytrain, feature_indices=(0, 1), step=0.5)","metadata":{"_uuid":"2fc29624-3e5f-4d6a-963f-75fb85a84688","_cell_guid":"5528ccba-0260-431b-9625-2a732035cc18","trusted":true,"collapsed":false,"papermill":{"duration":0.020461,"end_time":"2024-12-15T17:04:01.911883","exception":false,"start_time":"2024-12-15T17:04:01.891422","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-12-16T13:57:57.162752Z","iopub.status.idle":"2024-12-16T13:57:57.163299Z","shell.execute_reply.started":"2024-12-16T13:57:57.16302Z","shell.execute_reply":"2024-12-16T13:57:57.163047Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"_uuid":"798dff9a-26b1-4058-b408-e27a5fe8ed40","_cell_guid":"bb0ce0fb-8b29-4df0-b084-c97a73aacc22","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}